use reqwest::{Client, header::{AUTHORIZATION, CONTENT_TYPE}};
use serde_json::json;
use std::fs;
use std::env;
use dotenvy::dotenv;
use tokio::time::{sleep, Duration};

const API_URL: &str = "https://api.iot.yandex.net/v1.0/devices/actions";
const BATTERY_PATH: &str = "/sys/class/power_supply/BAT0/capacity";

#[tokio::main]
async fn main() {
    dotenv().ok();

    let token = env::var("YANDEX_IOT_TOKEN").expect("–ù–µ –Ω–∞–π–¥–µ–Ω YANDEX_IOT_TOKEN");
    let device_id = env::var("YANDEX_IOT_DEVICE_ID").expect("–ù–µ –Ω–∞–π–¥–µ–Ω YANDEX_IOT_DEVICE_ID");

    let client = Client::new();

    loop {
        if let Some(level) = get_battery_level() {
            println!("üîã –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞: {}%", level);

            if level <= 25 {
                println!("üî¥ –ó–∞—Ä—è–¥ –Ω–∏–∑–∫–∏–π! –í–∫–ª—é—á–∞–µ–º —Ä–æ–∑–µ—Ç–∫—É...");
                send_request(&client, &token, &device_id, true).await;
            } else if level == 100 {
                println!("üü¢ –ó–∞—Ä—è–¥ –ø–æ–ª–Ω—ã–π! –í—ã–∫–ª—é—á–∞–µ–º —Ä–æ–∑–µ—Ç–∫—É...");
                send_request(&client, &token, &device_id, false).await;
            }
        } else {
            println!("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞.");
        }

        sleep(Duration::from_secs(60)).await;
    }
}

fn get_battery_level() -> Option<u32> {
    fs::read_to_string(BATTERY_PATH)
        .ok()
        .and_then(|s| s.trim().parse::<u32>().ok())
}

async fn send_request(client: &Client, token: &str, device_id: &str, power_on: bool) {
    let payload = json!({
        "devices": [{
            "id": device_id,
            "actions": [{
                "type": "devices.capabilities.on_off",
                "state": {
                    "instance": "on",
                    "value": power_on
                }
            }]
        }]
    });

    let response = client.post(API_URL)
        .header(AUTHORIZATION, format!("Bearer {}", token))
        .header(CONTENT_TYPE, "application/json")
        .json(&payload)
        .send()
        .await;

    match response {
        Ok(res) if res.status().is_success() => {
            println!("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ {}", if power_on { "–≤–∫–ª—é—á–µ–Ω–∏–µ" } else { "–≤—ã–∫–ª—é—á–µ–Ω–∏–µ" });
        }
        Ok(res) => {
            println!("‚ùå –û—à–∏–±–∫–∞ {}: {:?}", res.status(), res.text().await);
        }
        Err(err) => {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –Ø–Ω–¥–µ–∫—Å IoT: {}", err);
        }
    }
}